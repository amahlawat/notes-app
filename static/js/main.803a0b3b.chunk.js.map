{"version":3,"sources":["components/Modal/Modal.js","utils/index.js","components/Notes/Note/Note.js","components/Notes/Notes.js","components/Create/Create.js","Layouts/Header/Header.js","components/Update/Update.js","components/spinner.gif","Routes.js","App.js","reportWebVitals.js","index.js"],"names":["Modal","thisRef","this","window","onclick","event","modal","document","getElementById","target","props","callbackModal","id","className","onClick","data","heading","description","to","React","Component","trimString","str","split","arr","i","push","join","concat","Note","note","toUpperCase","clickHandler","Notes","state","isModalShown","modalData","dragId","setState","action","tasks","JSON","parse","localStorage","getItem","indexx","forEach","task","index","splice","getElementsByClassName","innerHTML","console","log","onDragStart","dataTransfer","effectAllowed","getAttribute","onDrop","status","updateTask","toString","unshift","setItem","stringify","clearData","forceUpdate","preventDefault","notes","Fragment","type","map","display","dropid","onDragOver","draggable","onDragEnd","history","Create","validation","isValid","updateState","headingError","descriptionError","headingInputRef","value","descriptionInputRef","hasError","clearForm","successMessage","createRef","formHandler","bind","formInterval","e","Date","getTime","onSubmit","rows","cols","ref","input","Header","Footer","Update","failureMessage","taskId","isLoading","location","pathname","filter","undefined","isTaskIdValid","updatedDate","setTimeout","src","alt","withRouter","Routes","exact","path","render","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.803a0b3b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './Modal.css';\r\n\r\nclass Modal extends React.Component{\r\n    componentDidMount(){\r\n        let thisRef = this;\r\n        window.onclick = function(event) {\r\n            let modal = document.getElementById(\"appModal\");\r\n            if (event.target == modal) \r\n                thisRef.props.callbackModal(\"close\", \"\");\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div id=\"appModal\" className=\"modal\">\r\n\r\n                <div className=\"modal-content\">\r\n                    <span className=\"close\" onClick={() => this.props.callbackModal(\"close\", \"\")}>&times;</span>\r\n                    <h3 className=\"text-center\">Task Details</h3>\r\n                    <div className=\"task-body\">\r\n                        <h4>Id - <span id=\"modal-id\" />{this.props.data.id}</h4>\r\n                        <h4>Heading - <span id=\"modal-heading\" />{this.props.data.heading}</h4>\r\n                        <p>Description - <span id=\"modal-description\" />{this.props.data.description}</p>\r\n                        <button className=\"function-button\">\r\n                            <Link to={`/update/${this.props.data.id}`}>Edit</Link>\r\n                        </button>\r\n                        <button className=\"danger-button\" onClick={() => this.props.callbackModal(\"delete\", this.props.data.id)}>Delete</button>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Modal;","export const trimString = str => {\r\n    if(str != \"\"){\r\n        str = str.split(\"\");\r\n        let arr = [];\r\n        for(let i=0;i<100;i++){\r\n            arr.push(str[i]);\r\n        }\r\n        return arr.join(\"\").concat(\"...\");\r\n    }\r\n    return \"\";\r\n}","import React from 'react';\r\nimport './Note.css';\r\n\r\nimport {trimString} from '../../../utils';\r\n\r\nconst Note = props => (\r\n        <div className=\"single-note\" id={props.note.id} >\r\n            <p className=\"single-note-heading\">{(props.note.heading).toUpperCase()}</p>\r\n            <p className=\"single-note-description\">{trimString(props.note.description)}</p>\r\n            <button className=\"function-button\" onClick={() => props.clickHandler(props.note)}>View</button>\r\n        </div>\r\n)\r\n\r\nexport default Note;","import React from 'react';\r\n\r\nimport Modal from '../Modal/Modal';\r\nimport Note from './Note/Note';\r\nimport './Notes.css';\r\n\r\nclass Notes extends React.Component{\r\n    state = {\r\n        isModalShown: false,\r\n        modalData: null,\r\n        dragId: \"\"\r\n    }\r\n    clickHandler = note => {\r\n        this.setState({ isModalShown: true, modalData: note });\r\n    }\r\n    callbackModal = (action, id) => {\r\n        if(action === \"close\")\r\n            this.setState({ isModalShown: false });\r\n        else if(action === \"delete\"){\r\n            let tasks = JSON.parse(localStorage.getItem(\"tasks-app\"));\r\n            let indexx = -1;\r\n            tasks.forEach((task, index) => {\r\n                if(task.id === id)\r\n                    indexx = index; \r\n            });\r\n            indexx > -1 && tasks.splice(indexx, 1);\r\n            document.getElementsByClassName(\"task-body\")[0].innerHTML = `Task id <span class=\"highlight\">${id}</span> is deleted successfully<span class=\"success-tick\" />`;\r\n            console.log(tasks)\r\n            // localStorage.setItem(\"tasks-app\", JSON.stringify(tasks));\r\n        }\r\n    }\r\n    onDragStart = (event) => {\r\n        event.dataTransfer.effectAllowed = \"move\";\r\n        // console.log(\" drag start \", event.target.getAttribute('id'))\r\n        this.setState({ dragId: event.target.getAttribute('id') });\r\n        // event.dataTransfer.setData(\"text\", event.target.getAttribute('id'));\r\n        // event.currentTarget.style.backgroundColor = \"#e9c46a\";\r\n    }  \r\n    onDragEnd(event) {\r\n        // event.currentTarget.style.backgroundColor = \"#2a9d8f\";\r\n    }      \r\n    onDragOver(event) {\r\n        event.preventDefault();\r\n    }      \r\n    onDrop = (event) => {\r\n        let status = event.target.getAttribute(\"dropid\");\r\n        if(localStorage.getItem(\"tasks-app\") && this.state.dragId != \"\"){\r\n            let tasks = JSON.parse(localStorage.getItem(\"tasks-app\"));\r\n            let index = -1, updateTask = null;\r\n            tasks.forEach((task, i) => {\r\n                if((task.id).toString() === (this.state.dragId).split(\"-\")[1]){\r\n                    task.status = status;                     \r\n                    index = i;\r\n                    updateTask = task;\r\n                }\r\n            });\r\n            (index > -1) && tasks.splice(index, 1);\r\n            (updateTask != null) && tasks.unshift(updateTask);\r\n            localStorage.setItem(\"tasks-app\", JSON.stringify(tasks));\r\n        }\r\n        \r\n       event.dataTransfer.clearData();        \r\n       this.forceUpdate();\r\n    }\r\n\r\n    render(){\r\n        let displayTask = [\r\n            { type: \"Selected For Development\", status: \"selected\" },\r\n            { type: \"In Progress\", status: \"inprogress\" },\r\n            { type: \"Done\", status: \"done\" }\r\n        ];\r\n        let notes = JSON.parse(localStorage.getItem(\"tasks-app\"));\r\n        return(\r\n            <React.Fragment>\r\n                <div className=\"tasks\">\r\n                    {displayTask.map(display => (\r\n                        <div className=\"tasks-col\" key={`status-div-${display.status}`}>\r\n                            <p className=\"tasks-type\">{display.type}</p>\r\n                            <div className=\"tasks-list\">\r\n                                <div dropid={display.status} className=\"on-drop\" onDragOver={this.onDragOver} onDrop={this.onDrop}></div>\r\n                                {notes != null && notes.map(note => (\r\n                                    <React.Fragment key={note.id}>\r\n                                    {(note.status === display.status) &&\r\n                                        <div id={`outerdiv-${note.id}`} draggable=\"true\" onDragStart={this.onDragStart} onDragEnd={this.onDragEnd}>\r\n                                            <Note clickHandler={this.clickHandler} note={note} />\r\n                                        </div>}\r\n                                    </React.Fragment>\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                {this.state.isModalShown && <Modal data={this.state.modalData} callbackModal={this.callbackModal} history={this.props.history}/>}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Notes;\r\n\r\n","import React from 'react';\r\n\r\nimport './Create.css';\r\n\r\nclass Create extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.headingInputRef = React.createRef();\r\n        this.descriptionInputRef = React.createRef();\r\n        this.formHandler = this.formHandler.bind(this);\r\n        this.formInterval = null;\r\n        this.state={\r\n            headingError: \"\",\r\n            descriptionError: \"\",\r\n            hasError: false,\r\n            successMessage: \"\"\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        //clearTimeout(this.formInterval);\r\n    }\r\n\r\n    validation = () => {\r\n        let isValid = true;\r\n        let updateState = { headingError: \"\", descriptionError: \"\"};\r\n        if(this.headingInputRef.value === \"\"){\r\n            updateState.headingError = \"please add heading\"\r\n            isValid = false;\r\n        }\r\n        \r\n        if(this.descriptionInputRef.value === \"\"){\r\n            updateState.descriptionError = \"please add description\";\r\n            isValid = false;\r\n        }\r\n        updateState.hasError = !isValid;\r\n        this.setState({ ...updateState });\r\n        \r\n        return isValid;\r\n    }\r\n\r\n    clearForm = () => {\r\n        this.headingInputRef.value = \"\";\r\n        this.descriptionInputRef.value = \"\";\r\n        this.setState({ headingError: \"\", descriptionError: \"\", hasError: false, successMessage: \"\"});\r\n    }\r\n\r\n    formHandler(e){\r\n        e.preventDefault();\r\n        if(this.validation()){\r\n            let tasks = [];\r\n            if(localStorage.getItem(\"tasks-app\"))\r\n                tasks = JSON.parse(localStorage.getItem(\"tasks-app\"));\r\n            let task = {\r\n                id: new Date().getTime(),\r\n                heading: this.headingInputRef.value,\r\n                description: this.descriptionInputRef.value,\r\n                status: \"selected\"\r\n            };\r\n            tasks.push(task);\r\n            localStorage.setItem(\"tasks-app\", JSON.stringify(tasks));\r\n            this.setState({successMessage: \"data submitted\"});\r\n            //this.formInterval = setTimeout(() => {\r\n          //      this.clearForm();\r\n        //    }, 2000);\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"create\">\r\n                <form onSubmit={this.formHandler}>\r\n                    <h3 className=\"heading\">Create a New Task</h3>\r\n                    <ul className=\"wrapper\">\r\n                        <li className=\"form-row\">\r\n                            <label>Heading</label><br/>\r\n                            <textarea rows=\"3\" cols=\"50\" ref={input => this.headingInputRef = input} />\r\n                        </li>\r\n                        <li className=\"form-row\">\r\n                            <label>Description</label>\r\n                            <textarea rows=\"4\" cols=\"100\"  ref={input => this.descriptionInputRef = input} />\r\n                        </li>\r\n                        {this.state.hasError && <li className=\"form-row\">\r\n                            <div className=\"error\">{this.state.headingError} {this.state.descriptionError}</div>        \r\n                        </li>}\r\n                        {this.state.successMessage && <li className=\"form-row\">\r\n                            <div className=\"success\">{this.state.successMessage}</div>        \r\n                        </li>}\r\n                        <li className=\"form-row btn-row\">\r\n                            <button className=\"blue-button\" type=\"button\" onClick={this.clearForm}>Clear</button>                        \r\n                            <button className=\"blue-button\" type=\"submit\">Submit</button>                        \r\n                        </li>\r\n                    </ul>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Create;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport './Header.css';\r\n\r\nexport const Header = () => (\r\n    <div className=\"header\">\r\n        <NavLink to=\"/\">Notes App</NavLink>\r\n        <NavLink to=\"/create\" className=\"create-navlink\">\r\n            <div className=\"create-btn\">Create +</div>\r\n        </NavLink>\r\n    </div>\r\n);\r\n\r\nexport const Footer = () => (\r\n    <div className=\"footer\">\r\n        developed in react\r\n    </div>\r\n);\r\n","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nimport './Update.css';\r\nimport spinner from '../spinner.gif';\r\n\r\nclass Update extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.headingInputRef = React.createRef();\r\n        this.descriptionInputRef = React.createRef();\r\n        this.formHandler = this.formHandler.bind(this);\r\n        this.formInterval = null;\r\n        this.state={\r\n            headingError: \"\",\r\n            descriptionError: \"\",\r\n            hasError: false,\r\n            successMessage: \"\",\r\n            failureMessage: \"\",\r\n            taskId: \"\",\r\n            isLoading: false\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n //       console.log(\" this.props \", this.props);\r\n        if((this.props.location.pathname).split(\"/\")[2] != \"\"){\r\n            this.setState({ taskId: (this.props.location.pathname).split(\"/\")[2]});\r\n            console.log((this.props.location.pathname).split(\"/\")[2]);\r\n            let id = (this.props.location.pathname).split(\"/\")[2];\r\n            let tasks = JSON.parse(localStorage.getItem(\"tasks-app\"));\r\n            if(tasks != null){\r\n                let task = tasks.filter(data => (data.id).toString() === id);\r\n                if(task[0] != undefined){\r\n                    this.headingInputRef.value = task[0].heading;\r\n                    this.descriptionInputRef.value = task[0].description;    \r\n                }\r\n            }\r\n        }\r\n    }\r\n    componentWillUnmount(){\r\n        //clearTimeout(this.formInterval);\r\n    }\r\n\r\n    validation = () => {\r\n        let isValid = true;\r\n        let updateState = { headingError: \"\", descriptionError: \"\"};\r\n        if(this.headingInputRef.value === \"\"){\r\n            updateState.headingError = \"please add heading\"\r\n            isValid = false;\r\n        }\r\n        \r\n        if(this.descriptionInputRef.value === \"\"){\r\n            updateState.descriptionError = \"please add description\";\r\n            isValid = false;\r\n        }\r\n        updateState.hasError = !isValid;\r\n        this.setState({ ...updateState });\r\n        \r\n        return isValid;\r\n    }\r\n\r\n    clearForm = () => {\r\n        this.headingInputRef.value = \"\";\r\n        this.descriptionInputRef.value = \"\";\r\n        this.setState({ headingError: \"\", descriptionError: \"\", hasError: false, successMessage: \"\"});\r\n    }\r\n\r\n    formHandler(e){\r\n        e.preventDefault();\r\n        this.setState({isLoading: true});\r\n        if(this.validation()){\r\n            let tasks = [];\r\n            if(localStorage.getItem(\"tasks-app\"))\r\n                tasks = JSON.parse(localStorage.getItem(\"tasks-app\"));\r\n            let isTaskIdValid = false;            \r\n            tasks.forEach(task => {\r\n                if((task.id).toString() === this.state.taskId){\r\n                    isTaskIdValid = true;\r\n                    task.updatedDate = new Date();\r\n                    task.heading = this.headingInputRef.value;\r\n                    task.description = this.descriptionInputRef.value;\r\n                }\r\n            })\r\n            localStorage.setItem(\"tasks-app\", JSON.stringify(tasks));\r\n            if(isTaskIdValid)  this.setState({successMessage: \"data updated\" });\r\n            else this.setState({failureMessage: \"task id does not exist\" });\r\n        }\r\n        setTimeout(() => {\r\n            this.setState({ isLoading: false });\r\n        }, 2000);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"create\">\r\n                <form onSubmit={this.formHandler}>\r\n                <h3 className=\"heading\">Update Task Id {this.state.taskId}</h3>\r\n                    <ul className=\"wrapper\">\r\n                        <li className=\"form-row\">\r\n                            <label>Heading</label><br/>\r\n                            <textarea rows=\"3\" cols=\"50\" ref={input => this.headingInputRef = input} />\r\n                        </li>\r\n                        <li className=\"form-row\">\r\n                            <label>Description</label>\r\n                            <textarea rows=\"4\" cols=\"100\"  ref={input => this.descriptionInputRef = input} />\r\n                        </li>\r\n                        {this.state.hasError && <li className=\"form-row\">\r\n                            <div className=\"error\">{this.state.headingError} {this.state.descriptionError}</div>        \r\n                        </li>}\r\n                        {this.state.successMessage && <li className=\"form-row\">\r\n                            <div className=\"success\">{this.state.successMessage}</div>        \r\n                        </li>}\r\n                        {this.state.failureMessage && <li className=\"form-row\">\r\n                            <div className=\"error\">{this.state.failureMessage}</div>        \r\n                        </li>}\r\n                        <li className=\"form-row btn-row\">\r\n                            <button className=\"blue-button\" type=\"button\" onClick={this.clearForm}>Clear</button>                        \r\n                            {!this.state.isLoading ? <button className=\"blue-button\" type=\"submit\">Update</button>:\r\n                            <img src=\"\" alt=\"loading...\" className=\"loader\" />}                        \r\n                        </li>\r\n                    </ul>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(Update);","export default __webpack_public_path__ + \"static/media/spinner.dbb22bcf.gif\";","import React from 'react';\r\nimport { \r\n    BrowserRouter as Router, \r\n    Switch,\r\n    Route\r\n} from 'react-router-dom';\r\n\r\nimport Notes from './components/Notes/Notes';\r\nimport Create from './components/Create/Create';\r\nimport { Header, Footer } from './Layouts/Header/Header';\r\nimport Update from './components/Update/Update';\r\n\r\nexport default function Routes(){\r\n    return(\r\n        <Router>\r\n            <Header />\r\n\r\n            <Switch>\r\n                <Route exact path=\"/\">\r\n                    <Notes />\r\n                </Route>\r\n                <Route exact path=\"/create\">\r\n                    <Create />\r\n                </Route>\r\n                <Route path=\"/update/:id\">\r\n                    <Update />\r\n                </Route>\r\n                <Route render={() => <div>404</div>} />\r\n            </Switch>\r\n\r\n            <Footer />\r\n        </Router>\r\n    )\r\n}","import React from 'react';\nimport Routes from './Routes';\n\nimport './components/common.css';\n\nconst App = () => <Routes />;\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}